/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import { TableWidget } from './TableWidget';

export type TaskId = string;
/**
 * How long we expect this task to take from start to finish.
 */
export type EstimatedTime = string;
/**
 * Current human-readable status of the task.
 */
export interface TaskStep {
  description: string;
  start_timestamp: number;
  estimated_timestamp: number;
}
export type TaskStatus = string;
/**
 * header for the generated section text
 */
export type Title = string;
/**
 * A short summary of the generated section
 */
export type Tldr = string;
/**
 * The generated section text
 */
export type Text = string;
/**
 * The id of the citation which is of the format (index, author_ref_string, year)
 */
export type Id = string;
/**
 * The Semantic Scholar id of the cited paper
 */
export type CorpusId = number;
/**
 * Title of the paper
 */
export type Title1 = string;
/**
 * Year of publication
 */
export type Year = number;
/**
 * Venue of publication
 */
export type Venue = string | null;
/**
 * The name of the author
 */
export type Name = string;
/**
 * The Semantic Scholar id of the author
 */
export type Authorid = string | null;
/**
 * Authors of the paper
 */
export type Authors = Author[];
/**
 * The number of times the source paper has been cited
 */
export type NCitations = number | null;
/**
 * A list of all the relevant snippets from the cited paper
 */
export type Snippets = string[] | null;
/**
 * Relevance score of the snippet for the query
 */
export type Score = number;
/**
 * The citations used in the generated section
 */
export type Citations = CitationSrc[];
/**
 * The generated iterations of the answer
 */
export type Sections = GeneratedSection[];
/**
 * The query that was posed to the tool.
 */
export type Query = string;

export interface AsyncTaskStateCompleted {
  task_id?: TaskId;
  /**
   * Final result of the task.
   */
  task_result: TaskResult;
  query: Query;
  [k: string]: unknown;
}

export interface AsyncTaskStateRunning {
  task_id?: TaskId;
  estimated_time: EstimatedTime;
  task_status: TaskStatus;
  steps: TaskStep[];
  task_result: null;
  query: Query;
  [k: string]: unknown;
}

export type AsyncTaskState = AsyncTaskStateCompleted | AsyncTaskStateRunning;
/**
 * The outcome of running a Task to completion
 */
export interface TaskResult {
  sections: Sections;
  [k: string]: unknown;
}
export interface GeneratedSection {
  title?: Title;
  tldr?: Tldr;
  text?: Text;
  citations?: Citations;
  table?: TableWidget;
  [k: string]: unknown;
}
export interface CitationSrc {
  id?: Id;
  paper: PaperDetails;
  snippets?: Snippets;
  score: Score;
  [k: string]: unknown;
}
/**
 * Metadata of the cited paper
 */
export interface PaperDetails {
  corpus_id: CorpusId;
  title: Title1;
  year: Year;
  venue: Venue;
  authors: Authors;
  n_citations?: NCitations;
  [k: string]: unknown;
}
export interface Author {
  name: Name;
  authorId: Authorid;
  [k: string]: unknown;
}
/**
 * Any extra task-specific state can go in here as free-form JSON-serializable dictionary.
 */
export interface ExtraState {
  [k: string]: unknown;
}
