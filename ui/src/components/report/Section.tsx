import reactToText from 'react-to-text';

import AccordionDetails from '@mui/material/AccordionDetails';

import React from 'react';
import { Box, Typography } from '@mui/material';
import Markdown, { MarkdownToJSX } from 'markdown-to-jsx';
import { InlinePaperChipWidgetWithEvidence } from '../widgets/InlinePaperChipWidgetWithEvidence';
import { InlinePaperChipWidgetProps } from '../widgets/InlinePaperChipWidget';
import { LitTable } from './LitTable';
import { MessageFeedbackComp } from '../widgets/MessageFeedback';
import { CitationSrc, GeneratedSection } from '../../@types/AsyncTaskState';
import { baseMarkdownOptions, FeedbackContainer, hasTable } from './SectionsInner';

export const NoMemoSection = (props: {
  section: GeneratedSection;
  idx: number;
  taskId: string;
  cookieUserId: string;
}): React.ReactNode => {
  const { section, taskId, cookieUserId, idx } = props;

  if (!section?.text) {
    return null;
  }
  const citationId2Citation: { [corpusId: string]: CitationSrc } = {};

  section.citations?.forEach((citation) => {
    if (citation?.paper?.corpus_id) {
      citationId2Citation[citation.paper.corpus_id] = citation;
    }
  });
  const markdownOptions: MarkdownToJSX.Options = {
    overrides: {
      ...baseMarkdownOptions.overrides,
      Paper: {
        component: (props: Partial<InlinePaperChipWidgetProps>) => {
          const { corpusId, paperTitle, children, id, ...rest } = props;
          let paperTitleStr = paperTitle;
          if (!paperTitleStr && children) {
            paperTitleStr = reactToText(children);
          }

          if (corpusId && paperTitleStr) {
            const citation = citationId2Citation[corpusId];
            const detail = citation?.paper;
            if (!detail) {
              return id;
            }
            return (
              <InlinePaperChipWidgetWithEvidence
                {...rest}
                isShortName={true}
                paperTitle={paperTitleStr}
                corpusId={corpusId}
                fullTitle={detail.title ?? '[Paper Title Unkonwn]'}
                id={`${corpusId} `}
                paperDetails={detail}
                evidences={(citation.snippets ?? []).map((snippet) => ({ text: snippet }))}
                noBadge
              />
            );
          } else {
            console.log('ERR', corpusId, paperTitleStr, id);
            if (id) {
              return `${id} `;
            }
            return null;
          }
        },
      },
      Model: {
        component: (props: { name: string; version: string }) => {
          return (
            <InlinePaperChipWidgetWithEvidence
              isShortName={true}
              paperTitle={'(LLM Memory)'}
              corpusId={-1}
              fullTitle={`Model: ${props.name} ${props.version}`}
              id={props.name}
              noBadge
              evidences={[
                {
                  text: `Generated by ${props.name} ${props.version}. We could not find any relevant reference with evidence supporting this statement.`,
                },
              ]}
            />
          );
        },
      },
    },
  };

  return (
    <AccordionDetails
      sx={{
        padding: '0 16px 8px 16px',
      }}
    >
      {/* Summary */}
      <Box sx={{ background: '#fff', borderRadius: '4px 4px 0 0', padding: '16px' }}>
        <Markdown options={markdownOptions}>{section.text}</Markdown>
      </Box>
      <FeedbackContainer>
        <Typography variant="body1">Is this section helpful?</Typography>
        <MessageFeedbackComp
          taskId={taskId}
          userId={cookieUserId}
          section={{
            name: section.title ?? 'unknown',
            idx: idx,
            fb_type: 'text',
          }}
        />
      </FeedbackContainer>

      {/* Table */}
      {hasTable(section) && section.table && (section.table?.rows?.length ?? 0) > 1 && (
        <>
          <Box sx={{ background: 'white', borderRadius: '4px 4px 0 0', padding: '16px' }}>
            <LitTable table={section.table} corpusId2Citation={citationId2Citation} />
          </Box>
          <FeedbackContainer>
            <Typography variant="body1">Is this table helpful?</Typography>
            <MessageFeedbackComp
              taskId={taskId}
              userId={cookieUserId}
              section={{
                name: section.title ?? 'unknown',
                idx: idx,
                fb_type: 'table',
              }}
            />
          </FeedbackContainer>
        </>
      )}
    </AccordionDetails>
  );
};

export const Section = React.memo(NoMemoSection, (prevProps, nextProps) => {
  return (
    prevProps.section?.text === nextProps.section?.text &&
    prevProps.section?.title === nextProps.section?.title &&
    prevProps.idx === nextProps.idx &&
    hasTable(prevProps.section) === hasTable(nextProps.section)
  );
});
